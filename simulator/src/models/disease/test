import numpy as np
import matplotlib.pyplot as plt

# Function to define the system of differential equations
def disease_model(t, y, beta, sigma, gamma, alpha, theta, delta, N):
    S, E, A, T, I, R, D = y
    
    # Differential equations
    dSdt = -beta * S * (I + A) / N
    dEdt = beta * S * (I + A) / N - sigma * E
    dAdt = sigma * E - (gamma + alpha) * A
    dTdt = alpha * A - theta * T
    dIdt = gamma * A - delta * I
    dRdt = theta * T + delta * I
    dDdt = alpha * A
    
    return [dSdt, dEdt, dAdt, dTdt, dIdt, dRdt, dDdt]

# Parameters
N = 1000  # Total population
beta = 0.3  # Transmission rate
sigma = 0.1  # Rate of progression from exposed to symptomatic
gamma = 0.2  # Recovery rate of untreated symptomatic
alpha = 0.1  # Rate of receiving treatment
theta = 0.3  # Recovery rate with treatment
delta = 0.05  # Death rate

# Initial conditions
S0 = N - 1  # Initial number of susceptible individuals
E0 = 1      # Initial number of exposed individuals
A0 = 0      # Initial number of symptomatic individuals
T0 = 0      # Initial number of treatable individuals
I0 = 0      # Initial number of infectious individuals
R0 = 0      # Initial number of recovered individuals
D0 = 0      # Initial number of deceased individuals

# Initial state vector
y0 = [S0, E0, A0, T0, I0, R0, D0]

# Time vector
t = np.linspace(0, 200, 1000)  # Time span (days)

# Solve the differential equations using Euler's method
from scipy.integrate import odeint

sol = odeint(disease_model, y0, t, args=(beta, sigma, gamma, alpha, theta, delta, N))

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(t, sol[:, 0], label='Susceptible')
plt.plot(t, sol[:, 1], label='Exposed')
plt.plot(t, sol[:, 2], label='Symptomatic')
plt.plot(t, sol[:, 3], label='Treatable')
plt.plot(t, sol[:, 4], label='Infectious')
plt.plot(t, sol[:, 5], label='Recovered')
plt.plot(t, sol[:, 6], label='Deceased')
plt.xlabel('Time (days)')
plt.ylabel('Number of individuals')
plt.title('Compartmental Disease Model')
plt.legend()
plt.grid(True)
plt.show()
